/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.2 at Fri Apr 17 15:16:46 2020. */

#ifndef PB_FILEPART_PB_H_INCLUDED
#define PB_FILEPART_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _FilePart {
    char path[255];
    int32_t totalLength;
    int32_t offset;
    pb_bytes_array_t *data;
/* @@protoc_insertion_point(struct:FilePart) */
} FilePart;

/* Default values for struct fields */

/* Initializer values for message structs */
#define FilePart_init_default                    {"", 0, 0, NULL}
#define FilePart_init_zero                       {"", 0, 0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define FilePart_path_tag                        1
#define FilePart_totalLength_tag                 2
#define FilePart_offset_tag                      3
#define FilePart_data_tag                        4

/* Struct field encoding specification for nanopb */
extern const pb_field_t FilePart_fields[5];

/* Maximum encoded size of messages (where known) */
/* FilePart_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FILEPART_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
